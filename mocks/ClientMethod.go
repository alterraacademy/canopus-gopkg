// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	canopus "github.com/alterraacademy/canopus-gopkg"
	mock "github.com/stretchr/testify/mock"
)

// ClientMethod is an autogenerated mock type for the ClientMethod type
type ClientMethod struct {
	mock.Mock
}

// GenerateCart provides a mock function with given fields: payload, paymentMethod
func (_m *ClientMethod) GenerateCart(payload canopus.CartPayload, paymentMethod canopus.PaymentMethod) (canopus.CartResponse, error) {
	ret := _m.Called(payload, paymentMethod)

	var r0 canopus.CartResponse
	if rf, ok := ret.Get(0).(func(canopus.CartPayload, canopus.PaymentMethod) canopus.CartResponse); ok {
		r0 = rf(payload, paymentMethod)
	} else {
		r0 = ret.Get(0).(canopus.CartResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(canopus.CartPayload, canopus.PaymentMethod) error); ok {
		r1 = rf(payload, paymentMethod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAvailableMethod provides a mock function with given fields: amount
func (_m *ClientMethod) GetAvailableMethod(amount float64) ([]canopus.PaymentMethod, error) {
	ret := _m.Called(amount)

	var r0 []canopus.PaymentMethod
	if rf, ok := ret.Get(0).(func(float64) []canopus.PaymentMethod); ok {
		r0 = rf(amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]canopus.PaymentMethod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(float64) error); ok {
		r1 = rf(amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
